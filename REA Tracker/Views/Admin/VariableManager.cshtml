@using System.Collections.Specialized;
@{
    ViewBag.Title = Resources.strings.qviVariableManager;
}

<h2>@Resources.strings.qviVariableManager</h2>
<h3> @Resources.strings.qviBrowser </h3>
<table class="table table-bordered">
@{
    System.Web.HttpBrowserCapabilitiesBase bc = Request.Browser;
    <thead>
        <tr class="header">
            <th>
                @Resources.strings.qviVariable
            </th>
            <th>
                @Resources.strings.qviValue
            </th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Type    </td>                      <td>@bc.Type  </td>                         </tr>
        <tr><td>Name    </td>                      <td>@bc.Browser  </td>                      </tr>
        <tr><td>Version    </td>                   <td>@bc.Version  </td>                      </tr>
        <tr><td>Major Version </td>                <td>@bc.MajorVersion  </td>                 </tr>
        <tr><td>Minor Version </td>                <td>@bc.MinorVersion  </td>                 </tr>
        <tr><td>Platform    </td>                  <td>@bc.Platform  </td>                     </tr>
        <tr><td>Is mobile</td>                     <td>@bc.IsMobileDevice </td>                </tr>
        <tr><td>Is Beta    </td>                   <td>@bc.Beta  </td>                         </tr>
        <tr><td>Is Crawler    </td>                <td>@bc.Crawler  </td>                      </tr>
        <tr><td>Is AOL   </td>                     <td>@bc.AOL  </td>                          </tr>
        <tr><td>Is Win16    </td>                  <td>@bc.Win16  </td>                        </tr>
        <tr><td>Is Win32   </td>                   <td>@bc.Win32  </td>                        </tr>
        <tr><td>Supports Frames </td>              <td>@bc.Frames  </td>                       </tr>
        <tr><td>Supports Tables </td>              <td>@bc.Tables  </td>                       </tr>
        <tr><td>Supports Cookies </td>             <td>@bc.Cookies  </td>                      </tr>
        <tr><td>Supports VB Script </td>           <td>@bc.VBScript  </td>                     </tr>
        <tr><td>Supports JavaScript </td>          <td>@bc.EcmaScriptVersion.ToString()</td>   </tr>
        <tr><td>Supports Java Applets </td>        <td>@bc.JavaApplets  </td>                  </tr>
        <tr><td>Supports ActiveX Controls </td>    <td>@bc.ActiveXControls  </td>              </tr>
        <tr><td>Channel Definition Format </td>    <td>@bc.CDF</td>                            </tr>
    </tbody>
}
</table>

<h3> @Resources.strings.qviVariables </h3>
@{
            int loop1, loop2;
            NameValueCollection coll;

            // Load ServerVariable collection into NameValueCollection object.
            coll = Request.ServerVariables;
            // Get names of all keys into a string array.
            String[] arr1 = coll.AllKeys;
            <table class="table table-bordered">
                <thead>
                    <tr class="header">
                        <th>
                            @Resources.strings.qviKey
                        </th>
                        <th>
                            @Resources.strings.qviValue
                        </th>
                    </tr>
                </thead>
                <tbody> 
            @for (loop1 = 0; loop1 < arr1.Length; loop1++)
            {
                <tr>
                    <td>   @arr1[loop1]  </td>
                @{String[] arr2 = coll.GetValues(arr1[loop1]);}
                @for (loop2 = 0; loop2 < arr2.Length; loop2++)
                {
                   <td>  @Server.HtmlEncode(arr2[loop2])  </td>
                }
                </tr>
            }
                </tbody>
            </table>
}

<h3> @Resources.strings.qviUserReferences </h3>
<table class="table table-bordered">
    <thead>
        <tr class="header">
            <th>
                @Resources.strings.qviVariable
            </th>
            <th>
                @Resources.strings.qviValue
            </th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                User Agent
            </td>
            <td>
                @{
                    String userAgent;
                    userAgent = Request.UserAgent;
                }
                @userAgent
            </td>
        </tr>
        <tr>
            <td>Host Type</td>
            <td>@Request.RequestType</td>
        </tr>
        <tr>
            <td>User Host Address</td>
            <td>@Request.UserHostAddress</td>
        </tr>
        <tr>
            <td>User Host Name</td>
            <td>@Request.UserHostName</td>
        </tr>
        <tr>
            <td>Host Method</td>
            <td>@Request.HttpMethod</td>
        </tr>

        <tr>
            <td>Request Type</td>
            <td>@Request.RequestType</td>
        </tr>
        <tr>
            <td>User Host Address</td>
            <td>@Request.UserHostAddress</td>
        </tr>
        <tr>
            <td>User HostName</td>
            <td>@Request.UserHostName</td>
        </tr>
        <tr>
            <td>Http Method</td>
            <td>@Request.HttpMethod</td>
        </tr>
    </tbody>
</table>
<h2>@Resources.strings.qviBrowserTest</h2>
<script type="text/javascript">
/**
 * JavaScript Client Detection
 * (C) viazenetti GmbH (Christian Ludwig)
 */
(function (window) {
    {
        var unknown = '-';

        // screen
        var screenSize = '';
        if (screen.width) {
            width = (screen.width) ? screen.width : '';
            height = (screen.height) ? screen.height : '';
            screenSize += '' + width + " x " + height;
        }

        //browser
        var nVer = navigator.appVersion;
        var nAgt = navigator.userAgent;
		document.write('userAgent: ' + nAgt + '\n<br><br>');

        var browser = navigator.appName;
        var version = '' + parseFloat(navigator.appVersion);
        var majorVersion = parseInt(navigator.appVersion, 10);
        var nameOffset, verOffset, ix;

        // Opera
        if ((verOffset = nAgt.indexOf('Opera')) != -1) {
            browser = 'Opera';
            version = nAgt.substring(verOffset + 6);
            if ((verOffset = nAgt.indexOf('Version')) != -1) {
                version = nAgt.substring(verOffset + 8);
            }
        }
        // MSIE
        else if ((verOffset = nAgt.indexOf('MSIE')) != -1) {
            browser = 'Microsoft Internet Explorer';
            version = nAgt.substring(verOffset + 5);
        }
        else if ((verOffset = nAgt.indexOf('Edge')) != -1) {
            browser = 'Microsoft Edge';
            version = nAgt.substring(verOffset + 5);
        }
        // Chrome
        else if ((verOffset = nAgt.indexOf('Chrome')) != -1) {
            browser = 'Chrome';
            version = nAgt.substring(verOffset + 7);
        }
        // Safari
        else if ((verOffset = nAgt.indexOf('Safari')) != -1) {
            browser = 'Safari';
            version = nAgt.substring(verOffset + 7);
            if ((verOffset = nAgt.indexOf('Version')) != -1) {
                version = nAgt.substring(verOffset + 8);
            }
        }
        // Firefox
        else if ((verOffset = nAgt.indexOf('Firefox')) != -1) {
            browser = 'Firefox';
            version = nAgt.substring(verOffset + 8);
        }
        // MSIE 11+
        else if (nAgt.indexOf('Trident/') != -1) {
            browser = 'Microsoft Internet Explorer';
            version = nAgt.substring(nAgt.indexOf('rv:') + 3);
        }
        // Other browsers
        else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {
            browser = nAgt.substring(nameOffset, verOffset);
            version = nAgt.substring(verOffset + 1);
            if (browser.toLowerCase() == browser.toUpperCase()) {
                browser = navigator.appName;
            }
        }
        // trim the version string
        if ((ix = version.indexOf(';')) != -1) version = version.substring(0, ix);
        if ((ix = version.indexOf(' ')) != -1) version = version.substring(0, ix);
        if ((ix = version.indexOf(')')) != -1) version = version.substring(0, ix);

        majorVersion = parseInt('' + version, 10);

        if (isNaN(majorVersion)) {
            version = '' + parseFloat(navigator.appVersion);
            majorVersion = parseInt(navigator.appVersion, 10);
        }

        // mobile version
        var mobile = /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(nVer);

        // cookie
        var cookieEnabled = (navigator.cookieEnabled) ? true : false;

        if (typeof navigator.cookieEnabled == 'undefined' && !cookieEnabled) {
            document.cookie = 'testcookie';
            cookieEnabled = (document.cookie.indexOf('testcookie') != -1) ? true : false;
        }

        // system
        var os = unknown;
        var clientStrings = [
            {s:'Windows 3.11', r:/Win16/},
            {s:'Windows 95', r:/(Windows 95|Win95|Windows_95)/},
            {s:'Windows ME', r:/(Win 9x 4.90|Windows ME)/},
            {s:'Windows 98', r:/(Windows 98|Win98)/},
            {s:'Windows CE', r:/Windows CE/},
            {s:'Windows 2000', r:/(Windows NT 5.0|Windows 2000)/},
            {s:'Windows XP', r:/(Windows NT 5.1|Windows XP)/},
            {s:'Windows Server 2003', r:/Windows NT 5.2/},
            {s:'Windows Vista', r:/Windows NT 6.0/},
            {s:'Windows 7', r:/(Windows 7|Windows NT 6.1)/},
            {s:'Windows 8.1', r:/(Windows 8.1|Windows NT 6.3)/},
            {s:'Windows 8', r:/(Windows 8|Windows NT 6.2)/},
            {s:'Windows NT 4.0', r:/(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/},
            {s:'Windows ME', r:/Windows ME/},
            {s:'Android', r:/Android/},
            {s:'Open BSD', r:/OpenBSD/},
            {s:'Sun OS', r:/SunOS/},
            {s:'Linux', r:/(Linux|X11)/},
            {s:'iOS', r:/(iPhone|iPad|iPod)/},
            {s:'Mac OS X', r:/Mac OS X/},
            {s:'Mac OS', r:/(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/},
            {s:'QNX', r:/QNX/},
            {s:'UNIX', r:/UNIX/},
            {s:'BeOS', r:/BeOS/},
            {s:'OS/2', r:/OS\/2/},
            {s:'Search Bot', r:/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/}
        ];
        for (var id in clientStrings) {
            var cs = clientStrings[id];
            if (cs.r.test(nAgt)) {
                os = cs.s;
                break;
            }
        }

        var osVersion = unknown;

        if (/Windows/.test(os)) {
            osVersion = /Windows (.*)/.exec(os)[1];
            os = 'Windows';
        }

        switch (os) {
            case 'Mac OS X':
                osVersion = /Mac OS X (10[\.\_\d]+)/.exec(nAgt)[1];
                break;

            case 'Android':
                osVersion = /Android ([\.\_\d]+)/.exec(nAgt)[1];
                break;

            case 'iOS':
                osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(nVer);
                osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);
                break;
        }

        // flash (you'll need to include swfobject)
        /* script src="//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js" */
        var flashVersion = 'no check';
        if (typeof swfobject != 'undefined') {
            var fv = swfobject.getFlashPlayerVersion();
            if (fv.major > 0) {
                flashVersion = fv.major + '.' + fv.minor + ' r' + fv.release;
            }
            else  {
                flashVersion = unknown;
            }
        }

		var isSupported = false;
		if (
			//Windows XP and IE 8
			((('Windows' == os) && ('XP' == osVersion)) && (('Microsoft Internet Explorer' == browser) && ('8' == version))) ||
			//Windows Vista+ and IE10
			((('Windows' == os) && (('Vista' == osVersion) || ('7' == osVersion) || ('8' == osVersion) || ('8.1' == osVersion))) && (('Microsoft Internet Explorer' == browser) && ('10' == version))) ||
			//Firefox
			('Firefox' == browser)
			)
		{
			isSupported = true;
		}
    }

    window.jscd = {
        screen: screenSize,
        browser: browser,
        browserVersion: version,
        mobile: mobile,
        os: os,
        osVersion: osVersion,
        cookies: cookieEnabled,
        flashVersion: flashVersion,
		isSupported: isSupported
    };
}(this));

document.write('<table border=0 width="400px">' +
    '<tr><td>OS:</td><td>' + jscd.os + ' ' + jscd.osVersion + '</td></tr>' +
    '<tr><td>Browser:</td><td>' + jscd.browser + ' ' + jscd.browserVersion + '</td></tr>' +
	'<tr><td>Supported:</td><td>' + jscd.isSupported + '</td></tr>' +
    '<tr><td>Mobile:</td><td>' + jscd.mobile + '</td></tr>' +
    //'<tr><td>Flash:</td><td>' + jscd.flashVersion + '</td></tr>' +
    '<tr><td>Cookies:</td><td>' + jscd.cookies + '</td></tr>' +
    '<tr><td>Screen Size: ' + '</td><td>' + jscd.screen +
	'</table>'
);
</script>
<div id="browser"></div>